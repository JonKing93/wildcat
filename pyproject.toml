[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "wildcat"
version = "1.0.0"
description = "Command line tool to assess and map post-fire debris-flow hazards"
authors = [
    "Jonathan King <jking@usgs.gov>"
]
readme = "README.md"
license = "GPL-3.0-only"
repository = "https://code.usgs.gov/ghsc/lhp/wildcat"
keywords = ["fire", "debris flow", "hazard", "usgs", "map", "assessment"]
packages = [
    { include = "wildcat" },
]

[tool.poetry.dependencies]
python = ">=3.11, <3.13"
pfdf = { git = "https://code.usgs.gov/ghsc/lhp/pfdf.git", tag = "2.0.0" }
numpy = "*"
fiona = "*"
rasterio = "*"

[tool.poetry.group.dev.dependencies]
pytest = "*"
black = "*"
isort = "*"
pytest-cov = "*"
coverage = "*"
safety = "*"
poethepoet = "*"
sphinx = ">=7.2.6"
furo = "*"
sphinx_design = ">=0.5"

[tool.poetry.scripts]
wildcat = "wildcat._cli:main"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning:rasterio",
    "ignore::DeprecationWarning:pysheds.sview",
    "ignore::DeprecationWarning:pysheds.sgrid",
    "ignore::DeprecationWarning:numba.core.typing.context",
    "ignore::DeprecationWarning:nptyping.pandas_.dataframe",
]

[tool.isort]
profile = "black"


#####
# Developer Scripts
#####

[tool.poe.tasks.safety]
help = "Checks package dependencies for security issues"
cmd = "safety check"

[tool.poe.tasks.tests]
help = "Runs the tests and requires 100% coverage"
sequence = [
  { cmd = "pytest tests --cov=wildcat --cov=tests --cov-fail-under=100 --cov-report xml:coverage.xml" },
  { ref = "coverage" },
]

[tool.poe.tasks.coverage]
help = "Prints the coverage report for the tests"
cmd = "coverage report"

[tool.poe.tasks._open]
help = "Opens an HTML index page in a browser"
expr = "webbrowser.open(pathlib.Path.cwd() / sys.argv[1] / 'index.html')"
imports = ["webbrowser", "pathlib"]

[tool.poe.tasks.htmlcov]
help = "Builds an HTML coverage report and opens in browser"
sequence = [
  { cmd = "coverage html --skip-covered" },
  { ref = "_open htmlcov" },
]

[tool.poe.tasks.format]
help = "Applies black and isort to wildcat and its tests"
sequence = ["isort wildcat", "isort tests", "black wildcat", "black tests"]
default_item_type = "cmd"

[tool.poe.tasks.lint]
help = "Requires wildcat and its tests to be properly formatted"
sequence = [
  "isort wildcat --check", 
  "isort tests --check", 
  "black wildcat --check", 
  "black tests --check",
]
default_item_type = "cmd"

[tool.poe.tasks.pipeline]
help = "Mimics the Gitlab pipeline. Runs safety check, tests, and lint"
sequence = ["safety", "lint", "tests"]

[tool.poe.tasks._delete_docs]
help = "Deletes the docs if they exist"
expr = "shutil.rmtree('public') if pathlib.Path('public').exists() else None"
imports = ["shutil", "pathlib"]

[tool.poe.tasks.docs]
help = "Deletes and then rebuilds the documentation"
sequence = [
  { ref = "_delete_docs" },
  { cmd = "sphinx-build -qa docs public" },
]

[tool.poe.tasks.open-docs]
help = "Opens the docs in a webbrowser"
ref = "_open public"
